name: Build Wheels

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04, windows-2019, macos-11]

    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build wheels
      uses: pypa/cibuildwheel@v2.16.5
      env:
        # Configure cibuildwheel to build native archs ('auto'), and some
        # emulated ones
        CIBW_ARCHS_LINUX: auto aarch64
        CIBW_ARCHS_MACOS: x86_64 arm64
        CIBW_ARCHS_WINDOWS: auto
        
        # Skip some builds
        CIBW_SKIP: cp36-* cp37-* pp* *-musllinux*
        
        # Install dependencies for each platform
        CIBW_BEFORE_ALL_LINUX: >
          yum install -y cmake3 ninja-build gcc-c++ make &&
          ln -sf /usr/bin/cmake3 /usr/bin/cmake
        
        CIBW_BEFORE_ALL_MACOS: >
          brew install cmake ninja
        
        CIBW_BEFORE_ALL_WINDOWS: >
          choco install cmake ninja
        
        # Install Python dependencies
        CIBW_BEFORE_BUILD: >
          pip install --upgrade pip setuptools wheel &&
          pip install numpy pybind11[global] cmake ninja
        
        # Test imports
        CIBW_TEST_COMMAND: >
          python -c "import dicube; from dicube.codecs.jph import JphCodec; 
          codec = JphCodec(); 
          assert codec.is_available(), 'JphCodec not available'; 
          print('âœ“ Import test passed')"
        
        # Environment variables
        CIBW_ENVIRONMENT_LINUX: >
          OPENJPH_BUILD_STATIC=ON
          CMAKE_BUILD_TYPE=Release
          CMAKE_BUILD_PARALLEL_LEVEL=2
        
        CIBW_ENVIRONMENT_MACOS: >
          OPENJPH_BUILD_STATIC=ON
          CMAKE_BUILD_TYPE=Release
          CMAKE_BUILD_PARALLEL_LEVEL=2
          MACOSX_DEPLOYMENT_TARGET=10.14
        
        CIBW_ENVIRONMENT_WINDOWS: >
          OPENJPH_BUILD_STATIC=ON
          CMAKE_BUILD_TYPE=Release
          CMAKE_BUILD_PARALLEL_LEVEL=2

    - uses: actions/upload-artifact@v4
      with:
        name: cibw-wheels-${{ matrix.os }}-${{ strategy.job-index }}
        path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Build sdist
      run: pipx run build --sdist

    - uses: actions/upload-artifact@v4
      with:
        name: cibw-sdist
        path: dist/*.tar.gz

  upload_pypi:
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    # upload to PyPI on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/download-artifact@v4
      with:
        # unpacks default artifact into dist/
        # if `name: artifact` is omitted, the action will create extra parent dir
        pattern: cibw-*
        path: dist
        merge-multiple: true

    - uses: pypa/gh-action-pypi-publish@v1.8.11
      with:
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }} 